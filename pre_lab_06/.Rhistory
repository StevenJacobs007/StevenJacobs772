median_age_data <- get_acs(geography = "place",
variables = median_age_variable,
state = "MD",
survey = "acs5",
year = 2021,
key = "YOUR_API_KEY_HERE")
library(tidycensus)
library(tidyverse)
# Set your Census API key here
census_api_key("3e07ad10262f55e86661f2bb19ef01db7ecb02b5")
# Define the variable code for median age
median_age_variable <- "B01002_001"
# Load the median age data for Maryland jurisdictions
median_age_data <- get_acs(geography = "place",
variables = median_age_variable,
state = "MD",
survey = "acs5",
year = 2021,
key = "3e07ad10262f55e86661f2bb19ef01db7ecb02b5")
# Find the jurisdiction with the lowest median age
lowest_median_age_jurisdiction <- median_age_data %>%
arrange(median_age) %>%
slice(1)
library(tidycensus)
library(tidyverse)
# Set your Census API key here
census_api_key("3e07ad10262f55e86661f2bb19ef01db7ecb02b5")
# Define the variable code for median age
median_age_variable <- "B01002_001"
# Load the median age data for Maryland jurisdictions
median_age_data <- get_acs(geography = "place",
variables = median_age_variable,
state = "MD",
survey = "acs5",
year = 2021,
key = "3e07ad10262f55e86661f2bb19ef01db7ecb02b5")
# Find the jurisdiction with the lowest median age
lowest_median_age_jurisdiction <- median_age_data %>%
arrange(estimate) %>%
slice(1)
# Print the result
cat("The Maryland jurisdiction with the lowest median age is:",
lowest_median_age_jurisdiction$NAME,
"with a median age of",
lowest_median_age_jurisdiction$estimate, "\n")
library(tidycensus)
library(tidyverse)
# Set your Census API key here
census_api_key("3e07ad10262f55e86661f2bb19ef01db7ecb02b5", install = TRUE)
library(tidycensus)
library(tidyverse)
# Set your Census API key here
census_api_key("3e07ad10262f55e86661f2bb19ef01db7ecb02b5", install = TRUE, overwrite = TRUE)
# Define the variable code for median age
median_age_variable <- "B01002_001"
# Load the median age data for Maryland jurisdictions
median_age_data <- get_acs(geography = "place",
variables = median_age_variable,
state = "MD",
survey = "acs5",
year = 2021,
key = "3e07ad10262f55e86661f2bb19ef01db7ecb02b5")
# Find the jurisdiction with the lowest median age
lowest_median_age_jurisdiction <- median_age_data %>%
arrange(estimate) %>%
slice(1)
# Print the result
cat("The Maryland jurisdiction with the lowest median age is:",
lowest_median_age_jurisdiction$NAME,
"with a median age of",
lowest_median_age_jurisdiction$estimate, "\n")
# Filter the median_age_data dataframe for counties with a median age of at least 50
counties_with_median_age_50_or_more <- median_age_data %>%
filter(estimate >= 50)
# Display the result
counties_with_median_age_50_or_more
# Filter the median_age_data dataframe for counties with a median age of at least 50
counties_with_median_age_50_or_more <- median_age_data %>%
filter(estimate >= 50)
# Display the result
counties_with_median_age_50_or_more
readRenviron("~/.Renviron
readRenviron("~/.Renviron)
readRenviron("~/.Renviron")
readRenviron("~/.Renviron")
library(tidycensus)
library(tidyverse)
# Set your Census API key here
census_api_key("3e07ad10262f55e86661f2bb19ef01db7ecb02b5", install = TRUE, overwrite = TRUE)
# Define the variable code for median age
median_age_variable <- "B01002_001"
# Load the median age data for Maryland jurisdictions
median_age_data <- get_acs(geography = "place",
variables = median_age_variable,
state = "MD",
survey = "acs5",
year = 2021,
key = "3e07ad10262f55e86661f2bb19ef01db7ecb02b5")
# Find the jurisdiction with the lowest median age
lowest_median_age_jurisdiction <- median_age_data %>%
arrange(estimate) %>%
slice(1)
# Print the result
cat("The Maryland jurisdiction with the lowest median age is:",
lowest_median_age_jurisdiction$NAME,
"with a median age of",
lowest_median_age_jurisdiction$estimate, "\n")
# Load the Montgomery County 911 overdose calls data
montgomery_2022_overdoses <- read.csv("montgomery_2022_overdoses.csv")
# Load the Montgomery County 911 overdose calls data
# Load the Montgomery County 911 overdose calls data
montgomery_2022_overdoses <- read.csv("montgomery_2022_overdoses")
library(tidyverse)
# Create a new dataframe with the total number of calls for each zip code
zip_code_totals <- montgomery_2022_overdoses %>%
group_by(zip) %>%
summarize(total_calls = n())
library(tidycensus)
# Load the ACS variables for 2021 5-year estimates
acs_variables <- load_variables(2021, "acs5")
# Find the ACS variable for the total population of adults (18 and up)
acs_variable <- acs_variables %>%
filter(grepl("Total population: 18 years and over", label, ignore.case = TRUE)) %>%
select(variable)
library(tidycensus)
library(tidyverse)
# Set your Census API key here
census_api_key("3e07ad10262f55e86661f2bb19ef01db7ecb02b5", install = TRUE, overwrite = TRUE)
# Define the variable code for median age
median_age_variable <- "B01002_001"
# Load the median age data for Maryland jurisdictions
median_age_data <- get_acs(geography = "county",
variables = median_age_variable,
state = "MD",
survey = "acs5",
year = 2021,
key = "3e07ad10262f55e86661f2bb19ef01db7ecb02b5")
# Find the jurisdiction with the lowest median age
lowest_median_age_jurisdiction <- median_age_data %>%
arrange(estimate) %>%
slice(1)
# Print the result
cat("The Maryland jurisdiction with the lowest median age is:",
lowest_median_age_jurisdiction$NAME,
"with a median age of",
lowest_median_age_jurisdiction$estimate, "\n")
library(tidycensus)
library(tidyverse)
# Load the Montgomery County 911 overdose calls data
montgomery_2022_overdoses <- read.csv("montgomery_2022_overdoses")
library(tidycensus)
library(tidyverse)
file_path <- "montgomery_2022_overdoses"
if (file.exists(file_path)) {
# Load the file
montgomery_2022_overdoses <- read.csv(file_path)
} else {
cat("The file does not exist at the specified path.\n")
}
library(tidycensus)
library(tidyverse)
file_path <- "montgomery_2022_overdoses"
if (file.exists(file_path)) {
# Load the file
montgomery_2022_overdoses <- read.csv(file_path)
} else {
cat("The file does not exist at the specified path.\n")
}
# Set the working directory to the directory where the file is located
setwd("your/directory/path")
library(tidycensus)
library(tidyverse)
# Create a new dataframe with the total number of calls for each zip code
zip_code_totals <- montgomery_2022_overdoses %>%
group_by(zip) %>%
summarize(total_calls = n())
# Load the ACS variables for 2021 5-year estimates
acs_variables <- load_variables(2021, "acs5")
# Find the ACS variable for the total population of adults (18 and up)
acs_variable <- acs_variables %>%
filter(grepl("Total population: 18 years and over", label, ignore.case = TRUE)) %>%
select(variable)
library(tidycensus)
library(tidyverse)
# Find the ACS variable for the total population
total_population_variable <- acs_variables %>%
filter(grepl("Total population", label, ignore.case = TRUE)) %>%
select(variable)
library(tidycensus)
library(tidyverse)
# Load the ACS variables for 2021 5-year estimates
acs_variables <- load_variables(2021, "acs5")
# Find the ACS variable for the total population of adults (18 and up) by searching for a keyword
# In this case, we'll assume it contains the word "adult" and "18"
acs_variable <- acs_variables %>%
filter(str_detect(label, "adult|18", ignore.case = TRUE)) %>%
select(name)
library(tidycensus)
library(tidyverse)
library(dplyr)
# Assuming your data frame is named montgomery_2022_overdoses
# Use the table function to get the counts of each unique zip code
zip_code_counts <- table(montgomery_2022_overdoses$zip)
# View the result
zip_code_counts
library(tidycensus)
library(tidyverse)
library(dplyr)
# Assuming your data frame is named montgomery_2022_overdoses
# Use the table function to get the counts of each unique zip code
zip_code_counts <- table(montgomery_2022_overdoses$zip)
# Convert the result to a data frame
zip_code_counts_df <- as.data.frame(zip_code_counts)
# Rename the columns for clarity
colnames(zip_code_counts_df) <- c("Zip_Code", "Total_Count")
# View the result
head(zip_code_counts_df)
library(tidycensus)
# Set your Census API key here
census_api_key("3e07ad10262f55e86661f2bb19ef01db7ecb02b5")
# Define the variable code for the total 18 and over population
variable_code <- "B01001_001E"
# Get ACS data for all Maryland zip codes using the variable
acs_data <- get_acs(geography = "zip code tabulation area",
variables = variable_code,
state = "MD",
survey = "acs5",
year = 2021)
library(tidycensus)
# Set your Census API key here
census_api_key("3e07ad10262f55e86661f2bb19ef01db7ecb02b5")
# Define the variable code for the total 18 and over population
variable_code <- "B01001_001E"
# Get ACS data for all Maryland zip codes using the variable
acs_data <- get_acs(geography = "zip",
variables = variable_code,
state = "MD",
survey = "acs5",
year = 2021)
library(tidycensus)
# Set your Census API key here
census_api_key("3e07ad10262f55e86661f2bb19ef01db7ecb02b5")
# Define the variable code for the total 18 and over population
variable_code <- "B01001_001E"
# Get ACS data for all Maryland zip codes using the variable
acs_data <- get_acs(geography = "zip code tabulation area",
variables = variable_code,
state = "MD",
survey = "acs5",
year = 2021)
library(tidycensus)
# Set your Census API key here
census_api_key("3e07ad10262f55e86661f2bb19ef01db7ecb02b5")
# Define the variable code for the total 18 and over population
variable_code <- "B01001_001E"
# Get ACS data for all Maryland zip codes using the variable and the ZCTA5 geography
acs_data <- get_acs(geography = "ZCTA5",
variables = variable_code,
state = "MD",
survey = "acs5",
year = 2021)
library(tidycensus)
# Set your Census API key here
census_api_key("3e07ad10262f55e86661f2bb19ef01db7ecb02b5")
# Define the variable code for the total 18 and over population
variable_code <- "B01001_001E"
# Get ACS data for all Maryland zip codes using the variable and the ZCTA5 geography
acs_data <- get_acs(geography = "state",
variables = variable_code,
state = "MD",
survey = "acs5",
year = 2021)
# View the obtained ACS data
head(acs_data)
# Join ACS data to the zip code totals dataframe
joined_data <- left_join(zip_code_totals, acs_data, by = c("zip" = "GEOID"))
# Assuming you have created a dataframe named zip_code_totals and another named acs_data
# You can join the two dataframes and rename the estimate column
library(dplyr)
# Join the ACS data to the zip code totals dataframe
joined_data <- left_join(zip_code_totals, acs_data, by = c("zip" = "geoid"))
library(dplyr)
# Rename the "geoid" column in the ACS data frame to "zip"
acs_data <- acs_data %>%
rename(zip = geoid)
library(dplyr)
# Rename the "geoid" column in the ACS data frame to "zip"
acs_data <- acs_data %>%
rename(GEOID = zip)
library(dplyr)
# Rename the "geoid" column in the ACS data frame to "zip"
acs_data <- acs_data %>%
rename(GEOID = zip_code_counts_df)
library(tidycensus)
library(tidyverse)
library(dplyr)
library(dplyr)
# Assuming you have the dataframes acs_data and zip_code_counts_df
# Replace "Your_Column_Name" with your desired column name
# Join the ACS data to the zip code counts dataframe and rename the estimate column
result_df <- zip_code_counts_df %>%
left_join(acs_data, by = c("Zip_Code" = "zip")) %>%
rename(eastimate_column = Total_Count)
library(tidycensus)
library(tidyverse)
library(dplyr)
# Assuming your data frame is named montgomery_2022_overdoses
# Use the table function to get the counts of each unique zip code
zip_code_counts <- table(montgomery_2022_overdoses$zip)
# Convert the result to a data frame
zip_code_counts_df <- as.data.frame(zip_code_counts)
# Rename the columns for clarity
colnames(zip_code_counts_df) <- c("Zip_Code", "Total_Count")
# View the result
head(zip_code_counts_df)
library(dplyr)
# Assuming you have the dataframes acs_data and zip_code_counts_df
# Replace "Your_Column_Name" with your desired column name
# Rename the column in zip_code_counts_df to match the column in acs_data
zip_code_counts_df <- zip_code_counts_df %>%
rename(estimate = Zip_Code)
# Join the ACS data to the zip code counts dataframe and rename the estimate column
result_df <- zip_code_counts_df %>%
left_join(acs_data, by = "estimate") %>%
rename(estimate_column = Total_Count)
library(tidycensus)
# Set your Census API key here
census_api_key("3e07ad10262f55e86661f2bb19ef01db7ecb02b5")
# Define the variable code for the total 18 and over population
variable_code <- "B01001_001E"
# Get ACS data for all Maryland zip codes using the variable and the ZCTA5 geography
acs_data <- get_acs(geography = "zip",
variables = variable_code,
state = "MD",
survey = "acs5",
year = 2021)
library(tidycensus)
# Set your Census API key here
census_api_key("3e07ad10262f55e86661f2bb19ef01db7ecb02b5")
# Define the variable code for the total 18 and over population
variable_code <- "B01001_001E"
# Get ACS data for all Maryland zip codes using the variable and the ZCTA5 geography
acs_data <- get_acs(geography = "state",
variables = variable_code,
state = "MD",
survey = "acs5",
year = 2021)
# View the obtained ACS data
head(acs_data)
library(dplyr)
# Assuming you have the dataframes acs_data and zip_code_counts_df
# Replace "Your_Column_Name" with your desired column name
# Rename the column in zip_code_counts_df to match the column in acs_data
zip_code_counts_df <- zip_code_counts_df %>%
rename(zip = Zip_Code)
library(dplyr)
# Assuming you have the dataframes acs_data and zip_code_counts_df
# Replace "Your_Column_Name" with your desired column name
# Rename the column in zip_code_counts_df to match the column in acs_data
zip_code_counts_df <- zip_code_counts_df %>%
rename(zip_code_totals= estimate)
# Join the ACS data to the zip code counts dataframe and rename the estimate column
result_df <- zip_code_counts_df %>%
left_join(acs_data, by = "estimate") %>%
rename(estimate_column = Total_Count)
library(dplyr)
# Assuming you have the dataframes acs_data and zip_code_counts_df
# Replace "Your_Column_Name" with your desired column name
# Rename the column in zip_code_counts_df to match the column in acs_data
zip_code_counts_df <- zip_code_counts_df %>%
rename(zip_code_totals= estimate)
library(dplyr)
library(tidycensus)
library(tidyverse)
# Assuming you have the dataframes acs_data and zip_code_counts_df
# Replace "Your_Column_Name" with your desired column name
# Rename the column in zip_code_counts_df to match the column in acs_data
zip_code_counts_df <- zip_code_counts_df %>%
rename(zip_code_totals= estimate)
library(dplyr)
library(tidycensus)
library(tidyverse)
# Assuming you have the dataframes acs_data and zip_code_counts_df
# Replace "Your_Column_Name" with your desired column name
# Rename the column in zip_code_counts_df to match the column in acs_data
zip_code_counts_df <- zip_code_counts_df %>%
rename(Zip_Code = estimate)
library(dplyr)
library(tidycensus)
library(tidyverse)
# Assuming you have the dataframes acs_data and zip_code_counts_df
# Replace "Your_Column_Name" with your desired column name
# Rename the column in zip_code_counts_df to match the column in acs_data
zip_code_counts_df <- zip_code_counts_df %>%
rename(Zip_Code = variable)
library(dplyr)
library(tidycensus)
library(tidyverse)
# Assuming you have the dataframes acs_data and zip_code_counts_df
# Replace "Your_Column_Name" with your desired column name
# Join the ACS data to the zip code counts dataframe and rename the estimate column
result_df <- zip_code_counts_df %>%
left_join(acs_data, by = c("Zip_Code" = "zip")) %>%
rename(column_estimate = estimate)
library(dplyr)
library(tidycensus)
library(tidyverse)
# Assuming you have the dataframes acs_data and zip_code_counts_df
# Replace "Your_Column_Name" with your desired column name
# Join the ACS data to the zip code counts dataframe and rename the estimate column
result_df <- zip_code_counts_df %>%
left_join(acs_data, by = c("Zip_Code" = "estimate")) %>%
rename(column_estimate = estimate)
library(dplyr)
library(tidycensus)
library(tidyverse)
# Assuming you have the dataframes acs_data and zip_code_counts_df
# Replace "Your_Column_Name" with your desired column name
# Join the ACS data to the zip code counts dataframe and rename the estimate column
result_df <- zip_code_counts_df %>%
left_join(acs_data, by = c("estimate" = "Zip_Code")) %>%
rename(column_estimate = estimate)
library(dplyr)
library(tidycensus)
library(tidyverse)
# Assuming you have the dataframes acs_data and zip_code_counts_df
# Replace "Your_Column_Name" with your desired column name
# Join the ACS data to the zip code counts dataframe and rename the estimate column
result_df <- zip_code_counts_df %>%
left_join(acs_data, by = c("Zip_Code" = "variable")) %>%
rename(column_estimate = estimate)
library(dplyr)
library(tidycensus)
library(tidyverse)
# Assuming you have the dataframes acs_data and zip_code_counts_df
# Replace "Your_Column_Name" with your desired column name
# Perform a full join between the dataframes
result_df <- full_join(zip_code_counts_df, acs_data)
library(dplyr)
library(tidycensus)
library(tidyverse)
# Assuming you have the dataframes acs_data and zip_code_counts_df
# Replace "Your_Column_Name" with your desired column name
# Perform a full join between the dataframes
result_df <- cross_join(zip_code_counts_df, acs_data)
# Rename the estimate column to a meaningful name
result_df <- result_df %>% rename(column_estimate = estimate)
# View the result
head(result_df)
library(dplyr)
library(tidyverse)
library(tidycensus)
# Assuming you have the joined dataframe named result_df
# Replace "Your_Column_Name" with your desired column name
# Calculate the rate of calls per 1,000 population
result_df <- result_df %>%
mutate(Calls_Per_1000_Population = (Total_Count / calls_per_1000) * 1000)
library(dplyr)
library(tidyverse)
library(tidycensus)
library(dplyr)
# Assuming you have the joined dataframe named result_df
# Replace "Your_Column_Name" with your desired column name
# Calculate the rate of calls per 1,000 population using the ACS data
result_df <- result_df %>%
mutate(Calls_Per_1000_Population = (Total_Count / estimate) * 1000)
library(dplyr)
library(tidyverse)
library(tidycensus)
library(dplyr)
# Assuming you have the joined dataframe named result_df
# Replace "Your_Column_Name" with your desired column name
# Calculate the rate of calls per 1,000 population using the ACS data
result_df <- result_df %>%
mutate(Calls_Per_1000_Population = (Total_Count / column_estimate) * 1000)
# View the result
head(result_df)
library(dplyr)
# Assuming you have the joined dataframe named result_df
# Calculate the minimum and maximum populations
result_df <- result_df %>%
mutate(Min_Population = estimate - moe,
Max_Population = estimate + moe)
library(dplyr)
# Assuming you have the joined dataframe named result_df
# Calculate the minimum and maximum populations based on the ACS data
result_df <- result_df %>%
mutate(Min_Population = estimate - moe,
Max_Population = estimate + moe)
library(dplyr)
# Assuming you have the joined dataframe named result_df and the acs_data dataframe
# Calculate the minimum and maximum populations based on the ACS data
result_df <- result_df %>%
left_join(acs_data, by = c("Zip_Code" = "zip")) %>%
mutate(Min_Population = estimate - moe,
Max_Population = estimate + moe)
library(dplyr)
# Assuming you have the joined dataframe named result_df
# Calculate the minimum and maximum populations based on moe
result_df <- result_df %>%
mutate(Min_Population = Total_Count - moe,
Max_Population = Total_Count + moe)
# View the result
head(result_df)
library(dplyr)
# Assuming you have the joined dataframe named result_df
# Calculate the minimum and maximum populations based on moe
result_df <- result_df %>%
mutate(Min_Population = Total_Count - moe,
Max_Population = Total_Count + moe)
# View the result
head(result_df)
