load("~/Documents/GitHub/StevenJacobs772/lab_04/data/expense_category.csv")
maryland_expenses <- read.csv("~/Documents/GitHub/StevenJacobs772/lab_04/data/maryland_expenses.csv")
View(maryland_expenses)
State_of_Maryland_Grant_and_Loan_Data__FY2009_to_FY2022 <- read.csv("~/Documents/GitHub/StevenJacobs772/pre_lab_04/data/State_of_Maryland_Grant_and_Loan_Data__FY2009_to_FY2022.csv")
View(State_of_Maryland_Grant_and_Loan_Data__FY2009_to_FY2022)
State_of_Maryland_Grant_and_Loan_Data__FY2009_to_FY2022 <- read.csv("/Volumes/LaCieSCHOOL/lab_03/data/State_of_Maryland_Grant_and_Loan_Data__FY2009_to_FY2022.csv")
View(State_of_Maryland_Grant_and_Loan_Data__FY2009_to_FY2022)
State_of_Maryland_Payments_Data__FY2008_to_FY2024 <- read.csv("/Volumes/LaCieSCHOOL/lab_03/data/State_of_Maryland_Payments_Data__FY2008_to_FY2024.csv")
View(State_of_Maryland_Payments_Data__FY2008_to_FY2024)
md_voters <- read.table("~/Documents/GitHub/StevenJacobs772/pre_lab_05/images/md_voters.png", header=TRUE, quote="\"")
md_voters2 <- read.table("~/Documents/GitHub/StevenJacobs772/pre_lab_05/images/md_voters2.png", header=TRUE, quote="\"")
knitr::opts_chunk$set(echo = TRUE)
# turn off sci notation
options(scipen=999)
library(tidyverse)
knitr::include_graphics(rep("images/md_voters.png"))
knitr::include_graphics(rep("images/md_voters2.png"))
voters_by_county <- read_csv("tabula-Eligible Active Voters by County - GP22.csv")
voters_by_county <- read_csv("tabula-Eligible Active Voters by County - GP22.csv")
voters_by_county <- read_csv("tabula-Eligible Active Voters by County - GP22.csv")
voters_by_county <- read_csv("tabula-Eligible Active Voters by County - GG22.csv")
voters_by_county <- read_csv("tabula-Eligible Active Voters by County - GG22.csv")
knitr::include_graphics(rep("images/md_fentanyl_deaths_1.png"))
knitr::include_graphics(rep("images/md_fentanyl_deaths_2.png"))
knitr::include_graphics(rep("images/md_fentanyl_deaths_3.png"))
knitr::include_graphics(rep("images/md_fentanyl_deaths_4.png"))
`tabula.Annual_2020_Drug_Intox_Report.(2)` <- read.csv("~/Downloads/tabula-Annual_2020_Drug_Intox_Report (2).csv", header=FALSE)
View(`tabula.Annual_2020_Drug_Intox_Report.(2)`)
fentanyl_deaths <- read_csv("tabula-Annual_2020_Drug_Intox_Report.csv") |> clean_names()
View(`tabula.Annual_2020_Drug_Intox_Report.(2)`)
fentanyl_deaths <- read_csv("tabula.Annual_2020_Drug_Intox_Report(2)") |> clean_names()
tabula.Annual_2020_Drug_Intox_Report <- read.csv("~/Downloads/tabula-Annual_2020_Drug_Intox_Report.csv")
View(tabula.Annual_2020_Drug_Intox_Report)
`tabula.Annual_2020_Drug_Intox_Report.(1)` <- read.csv("~/Downloads/tabula-Annual_2020_Drug_Intox_Report (1).csv", header=FALSE)
View(`tabula.Annual_2020_Drug_Intox_Report.(1)`)
fentanyl_deaths <- read_csv("tabula.Annual_2020_Drug_Intox_Report.csv") |> clean_names()
fentanyl_deaths <- read_csv("tabula.Annual_2020_Drug_Intox_Report.csv(2)") |> clean_names()
fentanyl_deaths <- read_csv("tabula-Annual_2020_Drug_Intox_Report.csv") |> clean_names()
fentanyl_deaths <- read_csv("tabula-Annual_2020_Drug_Intox_Report.csv") |> clean_names()
fentanyl_deaths <- read_csv("tabula-Annual_2020_Drug_Intox_Report.(2)") |> clean_names()
fentanyl_deaths <- read_csv("tabula-Annual_2020_Drug_Intox_Report.csv", col_names = FALSE) |> clean_names()
View(tabula.Annual_2020_Drug_Intox_Report)
View(`tabula.Annual_2020_Drug_Intox_Report.(2)`)
fentanyl_deaths <- read_csv("tabula-Annual_2020_Drug_Intox_Report.(2)") |> clean_names()
fentanyl_deaths <- read_csv("tabula-Annual_2020_Drug_Intox_Report.(2)") |> clean_names()
fentanyl_deaths <- read_csv("tabula-Annual_2020_Drug_Intox_Report.csv(2)") |> clean_names()
fentanyl_deaths <- read_csv("tabula-Annual_2020_Drug_Intox_Report.csv", col_names = FALSE) |>
clean_names() |>
rename(jurisdiction = x1, deaths_2011 = x2, deaths_2012 = x3, deaths_2013 = x4, deaths_2014 = x5, deaths_2015 = x6, deaths_2016 = x7, deaths_2017 = x8,
deaths_2018 = x9, deaths_2019 = x10, deaths_2020 = x11, deaths_total = x12)
fentanyl_deaths <- read_csv("tabula-Annual_2020_Drug_Intox_Report.csv(2)") |> clean_names()
fentanyl_deaths <- read_csv("data/tabula-Annual_2020_Drug_Intox_Report.csv") |> clean_names()
fentanyl_deaths <- read_csv("data/tabula-Annual_2020_Drug_Intox_Report.csv") |>
fentanyl_deaths <- read_csv("data/tabula-Annual_2020_Drug_Intox_Report.csv")
fentanyl_deaths <- read_csv("data/tabula-Annual_2020_Drug_Intox_Report.csv") |> clean_names()
fentanyl_deaths <- read_csv("data/tabula-Annual_2020_Drug_Intox_Report.(2)csv") |> clean_names()
fentanyl_deaths <- read_csv("data/tabula-Annual_2020_Drug_Intox_Report (2).csv") |> clean_names()
fentanyl_deaths <- read_csv("data/tabula-Annual_2020_Drug_Intox_Report(2).csv") |> clean_names()
fentanyl_deaths <- read_csv("data/tabula-Annual_2020_Drug_Intox_Report(2).csv") |> clean_names()
fentanyl_deaths <- read_csv("data/tabula-Annual_2020_Drug_Intox_Report(2).csv") |> clean_names()
fentanyl_deaths <- read_csv("data/tabula-Annual_2020_Drug_Intox_Report(2)") |> clean_names()
fentanyl_deaths <- read_csv("data/tabula-Annual_2020_Drug_Intox_Report (2)") |> clean_names()
fentanyl_deaths <- read_csv("data/tabula-Annual_2020_Drug_Intox_Report.(2)") |> clean_names()
fentanyl_deaths <- read_csv("data/tabula-Annual_2020_Drug_Intox_Report.(2)") |>
clean_names()
fentanyl_deaths <- read_csv("data/tabula-Annual_2020_Drug_Intox_Report.(2)")
`tabula.Annual_2020_Drug_Intox_Report.(2)` <- read.csv("~/Documents/GitHub/StevenJacobs772/pre_lab_05/tabula-Annual_2020_Drug_Intox_Report (2).csv", header=FALSE)
View(`tabula.Annual_2020_Drug_Intox_Report.(2)`)
fentanyl_deaths <- read_csv("data/tabula-Annual_2020_Drug_Intox_Report.(2)") |> clean_names()
knitr::opts_chunk$set(echo = TRUE)
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse.
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse.
install.packages("tidyverse")
library(tidyverse)
`tabula.Baltimore.County;.Carey,.Samantha.log.OD` <- read.csv("~/Documents/GitHub/StevenJacobs772/lab_05/tabula-Baltimore County; Carey, Samantha log OD.csv")
View(`tabula.Baltimore.County;.Carey,.Samantha.log.OD`)
read_csv(`tabula.Baltimore.County;.Carey,.Samantha.log.OD`)
data <- read.csv("tabula-Baltimore County; Carey, Samantha log OD.csv")
data <- read.csv("tabula-Baltimore County; Carey, Samantha log OD.csv") |>
data
data <- read.csv("tabula-Baltimore County; Carey, Samantha log OD.csv") |>
data(tabula-Baltimore County; Carey, Samantha log OD.csv)
data <- read.csv("tabula-Baltimore County; Carey, Samantha log OD.csv") |>
data("tabula-Baltimore County; Carey, Samantha log OD.csv")
data <- read.csv("tabula-Baltimore County; Carey, Samantha log OD.csv") |>
read_csv(`tabula.Baltimore.County;.Carey,.Samantha.log.OD`)
read.csv(`tabula.Baltimore.County;.Carey,.Samantha.log.OD`)
data_preview <- read.csv("tabula-Baltimore County; Carey, Samantha log OD.csv")
head(data_preview)
# Load your data into a data frame (replace "data" with your data frame name)
data <- read.csv("tabula-Baltimore County; Carey, Samantha log OD.csv")
# Remove spaces from column names
colnames(data) <- gsub(" ", "", colnames(data))
# Load your data into a data frame (replace "data" with your data frame name)
data <- read.csv("tabula-Baltimore County; Carey, Samantha log OD.csv")
# Remove spaces from column names
colnames(data) <- gsub(" ", "", colnames(data))
# Load your data into a data frame (replace "data" with your data frame name)
data <- read.csv("tabula-Baltimore County; Carey, Samantha log OD.csv")
# Assign new column names without spaces
new_colnames <- c("DATE", "CALLTIME/CASENUMBER", "ODTYPE","LOCATION")
colnames(data) <- new_colnames
# Load your data into a data frame (replace "data" with your data frame name)
data <- read.csv("tabula-Baltimore County; Carey, Samantha log OD.csv")
# Remove spaces from column names
colnames(data) <- gsub(" ", "", colnames(data))
# Load your data into a data frame (replace "data" with your data frame name)
data <- read.csv("tabula-Baltimore County; Carey, Samantha log OD.csv")
# Assign new column names without spaces
new_colnames <- c("DATE", "CALLTIME/CASENUMBER", "ODTYPE","LOCATION")
colnames(data) <- new_colnames
head(data)
# Create a frequency table of date occurrences
date_frequency <- table(`tabula.Baltimore.County;.Carey,.Samantha.log.OD`$DATE)
# Display the frequency table
print(date_frequency)
# Create a frequency table of date occurrences
date_frequency <- table(`tabula.Baltimore.County;.Carey,.Samantha.log.OD`$DATE)
# Display the frequency table
print(date_frequency)
# Sort the frequency table in descending order
sorted_date_frequency <- sort(date_frequency, decreasing = TRUE)
# Display the sorted frequency table
print(sorted_date_frequency)
# Create a frequency table of unique dates and their counts
date_counts <- table(`tabula.Baltimore.County;.Carey,.Samantha.log.OD`$DATE)
# Convert the frequency table to a data frame
date_counts_tabula.Baltimore.County;.Carey,.Samantha.log.OD <- as.data.frame(date_counts)
# Create a frequency table of unique dates and their counts
date_counts <- table(`tabula.Baltimore.County;.Carey,.Samantha.log.OD`$DATE)
# Create a frequency table of unique dates and their counts
date_counts <- table(`tabula.Baltimore.County;.Carey,.Samantha.log.OD`$DATE)
#
date_counts_tabula.Baltimore.County;.Carey,.Samantha.log.OD <- as.data.frame(date_counts)
# Create a frequency table of unique dates and their counts
date_counts <- table(data$DATE)
# Create a frequency table of unique dates and their counts
date_counts <- table(data$DATE)
#
date_counts_data <- as.data.frame(date_counts)
# Create a frequency table of unique dates and their counts
date_counts <- table(data$DATE)
#
date_counts_data <- as.data.frame(date_counts)
#
colnames(date_counts_data) <- c("DATE", "Count")
# Create a frequency table of unique dates and their counts
date_counts <- table(data$DATE)
#
date_counts_data <- as.data.frame(date_counts)
#
colnames(date_counts_data) <- c("DATE", "Count")
#
print(date_counts_data)
# Create a frequency table of unique dates and their counts
date_counts <- table(data$DATE)
#
date_counts_data <- as.data.frame(date_counts)
#
colnames(date_counts_data) <- c("DATE", "Count")
#
print(date_counts_data)
#
date_counts_data <- date_counts_data[order(-date_counts_data$Count), ]
# Create a frequency table of unique dates and their counts
date_counts <- table(data$DATE)
#
date_counts_data <- as.data.frame(date_counts)
#
colnames(date_counts_data) <- c("DATE", "Count")
#
print(date_counts_data)
#
date_counts_data <- date_counts_data[order(-date_counts_data$Count), ]
#
print(date_counts_data)
install.packages("lubridate")
knitr::opts_chunk$set(echo = TRUE)
install.packages("lubridate")
library(lubridate)
date_counts_data$DATE <- as.Date(date_counts_data$DATE)
date_counts_data$DayOfWeek <- weekday(date_counts_data$DATE)
date_counts_data$DayOfWeek <- wday(date_counts_data$DATE)
date_counts_data$DayOfWeek <- wday(date_counts_data$DATE)
date_counts_data$DayOfWeek <- wday(date_counts_data$DATE)
# Assuming your data frame is named date_counts_df
date_counts_data$DATE <- as.Date(date_counts_data$DATE, format = "%m-%d-%Y")
# Now, continue with the other steps
# Add a column for the day of the week
date_counts_data$DayOfWeek <- wday(date_counts_data$DATE)
# Calculate the number of calls for each day of the week
library(dplyr)
day_of_week_counts <- date_counts_data %>%
group_by(DayOfWeek) %>%
summarize(TotalCalls = n())
# Calculate the percentage of calls for each day of the week
day_of_week_counts <- day_of_week_counts %>%
mutate(Percentage = (TotalCalls / sum(TotalCalls)) * 100)
# Display the resulting dataframe
print(day_of_week_counts)
install.packages("lubridate")
library(lubridate)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
install.packages("lubridate")
library(lubridate)
library(dplyr)
# Assuming your data frame is named date_counts_df
date_counts_data$DATE <- as.Date(date_counts_data$DATE, format = "%m-%d-%Y")
date_counts_data$DayOfWeek <- wday(date_counts_data$DATE)
day_of_week_counts <- date_counts_data %>%
group_by(DayOfWeek) %>%
summarize(TotalCalls = n())
day_of_week_counts <- day_of_week_counts %>%
mutate(Percentage = (TotalCalls / sum(TotalCalls)) * 100)
print(day_of_week_counts)
read.csv(`tabula.Baltimore.County;.Carey,.Samantha.log.OD`)
data_preview <- read.csv("tabula-Baltimore County; Carey, Samantha log OD.csv")
od_log <- read_csv("tabula-Baltimore County; Carey, Samantha log OD.csv", col_names = FALSE, show_col_types = FALSE) |>
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse.
install.packages("tidyverse")
library(tidyverse)
library(lubridate)
library(dplyr)
data_preview <- read.csv("tabula-Baltimore County; Carey, Samantha log OD.csv", colnames = FALSE, show_col_types = FALSE)
data_preview <- read.csv("tabula-Baltimore County; Carey, Samantha log OD.csv", colnames = FALSE, show_col_types = FALSE) |>
clean_names()
data_preview <- read.csv("tabula-Baltimore County; Carey, Samantha log OD.csv", colnames = FALSE, show_col_types = FALSE) |>
clean_names() |>
rename(date = x1,
time = x2,
case_number = x3,
evtyp = x4,
location = x5) |>
mutate(date = str_squish((str_replace_all(date,'\\.','')))) |>
mutate(date=mdy(date))
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse.
install.packages("tidyverse")
library(tidyverse)
library(lubridate)
library(dplyr)
library(janitor)
install.packages("tidyverse")
data_preview <- read.csv("tabula-Baltimore County; Carey, Samantha log OD.csv", colnames = FALSE, show_col_types = FALSE) |>
clean_names() |>
rename(date = x1,
time = x2,
case_number = x3,
evtyp = x4,
location = x5) |>
mutate(date = str_squish((str_replace_all(date,'\\.','')))) |>
mutate(date=mdy(date))
data_preview <- read.csv("tabula-Baltimore County; Carey, Samantha log OD.csv", colnames = FALSE, show_col_types = FALSE) |>
clean_names() |>
rename(dateofcall = x1,
time = x2,
case_number = x3,
evtyp = x4,
location = x5) |>
mutate(date = str_squish((str_replace_all(date,'\\.','')))) |>
mutate(date=mdy(date))
data_preview <- read.csv("tabula-Baltimore County; Carey, Samantha log OD.csv", colnames = FALSE, show_col_types = FALSE) |>
clean_names() |>
rename(calldate = x1,
time = x2,
case_number = x3,
evtyp = x4,
location = x5) |>
mutate(calldate = str_squish((str_replace_all(date,'\\.','')))) |>
mutate(date=mdy(date))
data_preview <- read.csv("tabula-Baltimore County; Carey, Samantha log OD.csv", colnames = FALSE, show_col_types = FALSE) |>
clean_names() |>
rename(calldate = x1,
time = x2,
case_number = x3,
evtyp = x4,
location = x5) |>
mutate(calldate = str_squish((str_replace_all(calldate,'\\.','')))) |>
mutate(calldate=mdy(calldate))
setwd("~/Documents/GitHub/StevenJacobs772/lab_05")
data_preview <- read.csv("tabula-Baltimore County; Carey, Samantha log OD.csv", colnames = FALSE, show_col_types = FALSE) |>
clean_names() |>
rename(calldate = x1,
time = x2,
case_number = x3,
evtyp = x4,
location = x5) |>
mutate(calldate = str_squish((str_replace_all(calldate,'\\.','')))) |>
mutate(calldate=mdy(calldate))
data_preview <- read.csv("tabula-Baltimore County; Carey, Samantha log OD.csv", colnames = FALSE, show_col_types = FALSE)
data_preview <- read_csv("tabula-Baltimore County; Carey, Samantha log OD.csv", col_names = FALSE, show_col_types = FALSE)
#clean_names() |>
#rename(calldate = x1,
#time = x2,
#case_number = x3,
#evtyp = x4,
#location = x5) |>
#mutate(calldate = str_squish((str_replace_all(calldate,'\\.','')))) |>
#mutate(calldate=mdy(calldate))
data_preview <- read_csv("tabula-Baltimore County; Carey, Samantha log OD.csv", col_names = FALSE, show_col_types = FALSE) |>
clean_names() |>
rename(calldate = x1,
time = x2,
case_number = x3,
evtyp = x4,
location = x5) |>
mutate(calldate = str_squish((str_replace_all(calldate,'\\.','')))) |>
mutate(calldate=mdy(calldate))
`tabula.Baltimore.County;.Carey,.Samantha.log.OD`$DayOfWeek <- wday(`tabula.Baltimore.County;.Carey,.Samantha.log.OD`$DATES, label = TRUE)
`tabula.Baltimore.County;.Carey,.Samantha.log.OD`$DayOfWeek <- wday(`tabula.Baltimore.County;.Carey,.Samantha.log.OD`$DATES)
library(lubridate)
# Assuming "DATES" is in the "MM-DD-YYYY" format
date_counts_data$DATE <- as.Date(date_counts_data$DATE, format = "%m-%d-%Y")
# Remove rows with missing dates
date_counts_data <- date_counts_data[!is.na(date_counts_data$DATE), ]
# Add the "DayOfWeek" column
date_counts_data$DayOfWeek <- wday(date_counts_data$DATE, label = TRUE)
library(lubridate)
# Assuming "DATES" is in the "MM-DD-YYYY" format
date_counts_data$DATE <- as.Date(date_counts_data$DATE, format = "%m-%d-%Y")
# Remove rows with missing dates
date_counts_data <- date_counts_data[!is.na(date_counts_data$DATE), ]
# Add the "DayOfWeek" column
date_counts_data$DayOfWeek <- wday(date_counts_data$DATE, label = TRUE)
library(lubridate)
# Assuming "DATES" is in the "MM-DD-YYYY" format
date_counts_data$DATE <- as.Date(date_counts_data$DATE, format = "%m-%d-%Y")
# Remove rows with missing dates
date_counts_data <- date_counts_data[!is.na(date_counts_data$DATE), ]
# Add the "DayOfWeek" column
date_counts_data$DayOfWeek <- wday(date_counts_data$DATE, label = TRUE)
print(head(date_counts_data))
library(lubridate)
# Assuming "DATES" is in the "MM-DD-YYYY" format
date_counts_data$DATE <- as.Date(date_counts_data$DATE, format = "%m-%d-%Y")
# Remove rows with missing dates
date_counts_data <- date_counts_data[!is.na(date_counts_data$DATE), ]
# Add the "DayOfWeek" column
date_counts_data$DayOfWeek <- wday(date_counts_data$DATE, label = TRUE)
print(date_counts_data)
library(lubridate)
# Assuming "DATES" is in the "MM-DD-YYYY" format
`tabula.Baltimore.County;.Carey,.Samantha.log.OD`$DATE <- as.Date(`tabula.Baltimore.County;.Carey,.Samantha.log.OD`$DATE, format = "%m-%d-%Y")
library(lubridate)
# Add the "DayOfWeek" column
`tabula.Baltimore.County;.Carey,.Samantha.log.OD`$DayOfWeek <- wday(`tabula.Baltimore.County;.Carey,.Samantha.log.OD`$DATE, label = TRUE)
library(lubridate)
# Add the "DayOfWeek" column
tabula.Baltimore.County;.Carey,.Samantha.log.OD$DayOfWeek <- wday(tabula.Baltimore.County;.Carey,.Samantha.log.OD$DATE, label = TRUE)
library(lubridate)
# Add the "DayOfWeek" column
`tabula.Baltimore.County;.Carey,.Samantha.log.OD`$DayOfWeek <- wday(`tabula.Baltimore.County;.Carey,.Samantha.log.OD`$DATE, label = TRUE)
library(lubridate)
# Assuming "DATES" is in the "MM-DD-YYYY" format
`tabula.Baltimore.County;.Carey,.Samantha.log.OD`$DATE <- as.Date(`tabula.Baltimore.County;.Carey,.Samantha.log.OD`$DATE, format = "%m-%d-%Y")
head(`tabula.Baltimore.County;.Carey,.Samantha.log.OD`)
library(lubridate)
# Assuming "DATES" is in the "MM-DD-YYYY" format
date_counts_data$DATE <- as.Date(date_counts_data$DATE, format = "%m-%d-%Y")
# Remove rows with missing dates
date_counts_data <- date_counts_data[!is.na(date_counts_data$DATES), ]
# Add the "DayOfWeek" column
date_counts_data$DayOfWeek <- weekdays(date_counts_data$DATE)
library(lubridate)
# Assuming "DATES" is in the "MM-DD-YYYY" format
date_counts_data$DATE <- as.Date(date_counts_data$DATE, format = "%m-%d-%Y")
# Remove rows with missing dates
date_counts_data <- date_counts_data[!is.na(date_counts_data$DATES), ]
# Add the "DayOfWeek" column
date_counts_data$DayOfWeek <- weekdays(date_counts_data$DATE)
head(date_counts_data)
library(lubridate)
# Assuming "DATES" is in the "MM-DD-YYYY" format
date_counts_data$DATE <- as.Date(date_counts_data$DATE, format = "%m-%d-%Y")
# Remove rows with missing dates
date_counts_data <- date_counts_data[!is.na(date_counts_data$DATES), ]
# Add the "DayOfWeek" column
date_counts_data$DayOfWeek <- weekdays(date_counts_data$DATE)
head(DayOfWeek)
library(lubridate)
# Assuming "DATES" is in the "MM-DD-YYYY" format
date_counts_data$DATE <- as.Date(date_counts_data$DATE, format = "%m-%d-%Y")
# Remove rows with missing dates
date_counts_data <- date_counts_data[!is.na(date_counts_data$DATES), ]
# Add the "DayOfWeek" column
date_counts_data$DayOfWeek <- weekdays(date_counts_data$DATE)
head(day_of_week_counts)
library(lubridate)
library(dplyr)
date_counts_data$DayOfWeek <- weekdays(date_counts_data$DATE)
date_counts_data$DayOfWeek <- weekdays(date_counts_data$DATE)
head(date_counts_data)
# Load the required libraries
library(dplyr)
library(lubridate)
# Assuming your data frame is named df and the date column is named DATES
# Ensure that the DATES column is in Date format
date_counts_data$DATE <- as.Date(date_counts_data$DATE, format = "%m/%d/%y")
# Add a column for the day of the week
date_counts_data$DayOfWeek <- weekdays(date_counts_data$DATE)
# Calculate the number of overdose calls for each day of the week
day_of_week_counts <- date_counts_data %>%
group_by(DayOfWeek) %>%
summarize(TotalCalls = n())
# Calculate the percentage of calls for each day of the week relative to the total number of all calls
day_of_week_counts <- day_of_week_counts %>%
mutate(Percentage = (TotalCalls / sum(TotalCalls)) * 100)
# Display the resulting data frame
print(day_of_week_counts)
# Convert the "DATE" column to the Date data type
date_counts_data$DATE <- as.Date(date_counts_data$DATE, format = "%m/%d/%y")
# Add the "DayOfWeek" column
date_counts_data$DayOfWeek <- weekdays(date_counts_data$DATE)
# Calculate the number of overdose calls for each day of the week
day_of_week_counts <- df %>%
group_by(DayOfWeek) %>%
summarize(TotalCalls = n())
# Convert the "DATE" column to the Date data type
date_counts_data$DATE <- as.Date(date_counts_data$DATE, format = "%m/%d/%y")
# Add the "DayOfWeek" column
date_counts_data$DayOfWeek <- weekdays(date_counts_data$DATE)
# Calculate the number of overdose calls for each day of the week
day_of_week_counts <- date_counts_data %>%
group_by(DayOfWeek) %>%
summarize(TotalCalls = n())
# Calculate the percentage of calls for each day of the week relative to the total number of all calls
day_of_week_counts <- day_of_week_counts %>%
mutate(Percentage = (TotalCalls / sum(TotalCalls)) * 100)
# Display the resulting data frame
print(day_of_week_counts)
# Convert the "DATE" column to character and then to Date
date_counts_data$DATE <- as.Date(as.character(date_counts_data$DATE), format = "%m/%d/%y")
# Add the "DayOfWeek" column
date_counts_data$DayOfWeek <- weekdays(date_counts_data$DATE)
# Calculate the number of overdose calls for each day of the week
day_of_week_counts <- date_counts_data %>%
group_by(DayOfWeek) %>%
summarize(TotalCalls = n())
# Calculate the percentage of calls for each day of the week relative to the total number of all calls
day_of_week_counts <- day_of_week_counts %>%
mutate(Percentage = (TotalCalls / sum(TotalCalls)) * 100)
# Display the resulting data frame
print(day_of_week_counts)
# Use the table() function to count the occurrences of each location
location_counts <- table(date_counts_data$LOCATION)
# Convert the result to a data frame and sort it from lowest to highest counts
location_counts_date_counts_data <- as.data.frame(location_counts)
location_counts_date_counts_data <- location_counts_date_counts_data[order(location_counts_date_counts_data$Freq), ]
# Rename the columns for clarity
colnames(location_counts_date_counts_data) <- c("Location", "Count")
# Use the table() function to count the occurrences of each location
location_counts <- table(date_counts_data$LOCATION)
# Convert the result to a data frame and sort it from lowest to highest counts
location_counts_date_counts_data <- as.data.frame(location_counts)
location_counts_date_counts_data <- location_counts_date_counts_data[order(location_counts_date_counts_data$Freq), ]
# Rename the columns for clarity
colnames(location_counts_date_counts_data) <- c("Location", "Count")
library(dplyr)
# Group the data by "LOCATION" and count the occurrences
location_counts_date_counts_data <- date_counts_data %>%
group_by(LOCATION) %>%
summarize(Count = n())
library(dplyr)
# Group the data by "LOCATION" and count the occurrences
location_counts_date_counts_data <- date_counts_data %>%
group_by(date_counts_data, LOCATION) %>%
summarize(Count = n())
library(dplyr)
library(dplyr)
# Assuming your data frame is named "DATA" and the location data is in the "LOCATION" column
# Group the data by "LOCATION" and count the occurrences
location_counts_date_counts_data <- data %>%
group_by(LOCATION) %>%
summarize(Count = n())
# Sort the result from lowest to highest counts
location_counts_date_counts_data <- location_counts_date_counts_data %>% arrange(Count)
# Display the result
print(location_counts_date_counts_data)
