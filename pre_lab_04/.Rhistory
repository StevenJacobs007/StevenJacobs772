cleaned_md_grant_loans <- md_grant_loans |>
mutate(grantee_clean=n_gram_merge(Grantee)) |>
select(Grantee, grantee_clean, everything())
cleaned_md_grant_loans
cleaned_md_grant_loans |>
group_by(Grantee, grantee_clean) |>
summarise(
count=n()
) |>
filter(str_detect(Grantee, '^w|^W')) |>
arrange(Grantee)
load("~/Downloads/State-of-Maryland-Grant-and-Loan-Data-FY2009-to-FY2022-csv.csv")
load("~/Downloads/State-of-Maryland-Grant-and-Loan-Data-FY2009-to-FY2022-csv.csv")
load("~/Downloads/State-of-Maryland-Grant-and-Loan-Data-FY2009-to-FY2022-csv (1).csv")
load("~/Documents/GitHub/StevenJacobs772/lab_04/data/maryland_expenses.csv")
knitr::opts_chunk$set(echo = TRUE)
# Turn off scientific notation
options(scipen=999)
# load your packages
# Turn off scientific notation
options(scipen=999)
# load your packages
# Turn off scientific notation
options(scipen=999)
# load your packages
# Turn off scientific notation
options(scipen=999)
options(scipen=999)
library(tidyverse)
library(lubridate)
library(janitor)
# load your packages
load("~/Documents/GitHub/StevenJacobs772/lab_04/data/maryland_expenses.csv")
library(readr)
State_of_Maryland_Grant_and_Loan_Data_FY2009_to_FY2022 <- read_csv("data/State_of_Maryland_Grant_and_Loan_Data__FY2009_to_FY2022.csv")
View(State_of_Maryland_Grant_and_Loan_Data_FY2009_to_FY2022)
knitr::opts_chunk$set(echo = TRUE)
load("~/Downloads/marvel-wikia-data.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(janitor)
library(readr)
library(refinr)
# Load required data
# Path to data should be loaded from folder "data" i.e. read_csv("data/name_of_data.csv")
dc_data <- read_csv("data/dc-wikia-data.csv")
marvel_data <- read_csv("data/marvel-wikia-data.csv")
# Clean required data and prepare for analysis if needed.
clean_dc <- clean_names(dc_data)
clean_marvel <- clean_names(marvel_data)
# Put code to reverse engineer sentence here
clean_dc |>
filter(appearances >= 1) |>
group_by(sex) |>
summarise(
count=n()) |>
arrange(desc(count)) |>
mutate(percentage = (count/sum(count)*100))
clean_marvel |>
filter(appearances >= 1) |>
group_by(sex) |>
summarise(
count=n()) |>
arrange(desc(count)) |>
mutate(percentage = (count/sum(count)*100))
# Display results of code below this codeblock
# Put code to reverse engineer sentence here
clean_dc |>
filter(appearances >= 1) |>
group_by(sex) |>
summarise(
count=n()) |>
arrange(desc(count)) |>
mutate(percentage = (count/sum(count)*100))
clean_marvel |>
filter(appearances >= 1) |>
group_by(sex) |>
summarise(
count=n()) |>
arrange(desc(count)) |>
mutate(percentage = (count/sum(count)*100))
# Display results of code below this codeblock
View(cleaned_md_grant_loans)
View(dc_data)
View(marvel_data)
# Put code to reverse engineer sentence here
clean_dc |>
group_by(year) |>
summarise(
count=n()
# Display results of code below this codeblock
# Put code to reverse engineer sentence here
clean_dc |>
group_by(year) |>
summarise(
count=n())
# Display results of code below this codeblock
# Put code to reverse engineer sentence here
girls_gays_theys <- clean_dc |>
filter(!is.na(gsm)) |>
# Display results of code below this codeblock
# Put code to reverse engineer sentence here
girls_gays_theys <- clean_dc |>
filter(!is.na(gsm))
# Display results of code below this codeblock
# Put code to reverse engineer sentence here
girls_gays_theys <- clean_dc |>
filter(!is.na(gsm))
view(girls_gays_theys)
# Display results of code below this codeblock
# Display results of code below this codeblock
girls_gays_theys |>
group_by(year) |>
summarise(
count_year=n()
)
# Put code to reverse engineer sentence here
dc_girls_gays_theys <- clean_dc |>
filter(!is.na(gsm))
view(girls_gays_theys)
# Put code to reverse engineer sentence here
dc_girls_gays_theys <- clean_dc |>
filter(!is.na(gsm))
# Display results of code below this codeblock
dc_girls_gays_theys |>
group_by(year) |>
summarise(
count_year=n()
)
marvel_girls_gays_they <- clean_marvel |>
filter(!is.na(gsm))
marvel_girls_gays_theys |>
group_by(year) |>
summarise(
count_year=n()
)
marvel_girls_gays_they <- clean_marvel |>
filter(!is.na(gsm))
marvel_girls_gays_theys |>
group_by(year) |>
summarise(
count_year=n()
)
marvel_girls_gays_they <- clean_marvel |>
filter(!is.na(gsm))
marvel_girls_gays_they <- clean_marvel |>
filter(!is.na(gsm))
marvel_girls_gays_they |>
group_by(year) |>
summarise(
count_year=n()
)
marvel_girls_gays_they |>
group_by(year) |>
summarise(
count_year=n()
)
# Put code to reverse engineer sentence here
clean_dc |>
filter(appearances >= 1) |>
group_by(sex, align) |>
summarise(
count=n()) |>
arrange(desc(count)) |>
mutate(percentage = (count/sum(count)*100))
# Display results of code below this codeblock
clean_marvel |>
filter(appearances >= 1) |>
group_by(sex, align) |>
summarise(
count=n()) |>
arrange(desc(count)) |>
mutate(percentage = (count/sum(count)*100))
clean_marvel |>
filter(appearances >= 1) |>
group_by(sex, align) |>
summarise(
count=n()) |>
arrange(desc(count)) |>
mutate(percentage = (count/sum(count)*100))
knitr::opts_chunk$set(echo = TRUE)
# Turn off scientific notation
options(scipen=999)
options(scipen=999)
library(tidyverse)
library(lubridate)
library(janitor)
# load your packages
data <- read.csv("maryland_expenses.csv")
load("~/Documents/GitHub/StevenJacobs772/lab_04/data/maryland_expenses.csv")
maryland_expenses <- read.csv("~/Documents/GitHub/StevenJacobs772/lab_04/data/maryland_expenses.csv")
View(maryland_expenses)
# Load a CSV file using read.csv
data <- read.csv("maryland_expenses")
# Load a CSV file using read.csv
read_csv(maryland_expenses)
# Load a CSV file using read.csv
maryland_expenses
# Replace "your_file.csv" with the actual file path or URL to your CSV file.
# Load a CSV file using read.csv
read.csv(maryland_expenses)
# Load the Maryland expenditures data table
maryland_expenses <- read.csv("maryland_expenses.csv", header = TRUE)
# Load the Maryland expenditures data table
# Load the CSV file and clean column names
maryland_expenses <- read.csv("maryland_expenses.csv", header = TRUE)
# Load the Maryland expenditures data table
# Load the CSV file with an absolute file path
maryland_expenses <- read.csv("/full/path/to/maryland_expenses.csv", header = TRUE)
# Load the Maryland expenditures data table
# Load the CSV file with an absolute file path
maryland_expenses <- read.csv("/full/path/to/maryland_expenses.csv", header = TRUE)
# Load the Maryland expenditures data table
read_file(maryland_expenses)
# Load the Maryland expenditures data table
maryland_expenses <- read_csv("data/maryland_expenses.csv")
# Load a CSV file using read.csv
# Load the CSV file from the "data" folder
file_path <- "data/maryland_expenses.csv"
maryland_expenses <- read.csv(file_path)
# Print the first few rows to inspect the data
head(maryland_expenses)
# Replace "your_file.csv" with the actual file path or URL to your CSV file.
# Load a CSV file using read.csv
# Load the CSV file from the "data" folder
file_path <- "data/maryland_expenses.csv"
maryland_expenses <- read.csv(file_path)
# Print the first few rows to inspect the data
head(maryland_expenses)
# Replace "your_file.csv" with the actual file path or URL to your CSV file.
file_path <- "data/maryland_expenses.csv"
maryland_expenses <- read.csv(file_path)
# Load a CSV file using read.csv
file_path <- "data/maryland_expenses.csv"
maryland_expenses <- read.csv(file_path)
head(maryland_expenses)
# Replace "your_file.csv" with the actual file path or URL to your CSV file.
file_path <- "data/maryland_expenses.csv"
maryland_expenses <- read.csv(file_path)
# Load the Maryland expenditures data table
# Load the CSV file from the "data" folder
file_path <- "data/maryland_expenses.csv"
maryland_expenses <- read.csv(file_path)
# Clean up column names (remove spaces and special characters, convert to lowercase)
colnames(maryland_expenses) <- gsub("[^a-zA-Z0-9]", "_", tolower(colnames(maryland_expenses)))
# Check for and convert date columns to date data type
date_columns <- c("date_column1", "date_column2")  # Replace with actual date column names
for (col in date_columns) {
if (col %in% colnames(maryland_expenses)) {
maryland_expenses[[col]] <- as.Date(maryland_expenses[[col]])
}
}
# Print the first few rows to inspect the cleaned data
head(maryland_expenses)
# Load the Maryland expenditures data table
file_path <- "data/maryland_expenses.csv"
maryland_expenses <- read.csv(file_path)
# Clean up column names (remove spaces and special characters, convert to lowercase)
colnames(maryland_expenses) <- gsub("[^a-zA-Z0-9]", "_", tolower(colnames(maryland_expenses)))
# Check for and convert date columns to date data type
date_columns <- c("date_column1", "date_column2")  # Replace with actual date column names
for (col in date_columns) {
if (col %in% colnames(maryland_expenses)) {
maryland_expenses[[col]] <- as.Date(maryland_expenses[[col]])
}
}
head(maryland_expenses)
# Assuming your data frame is named 'maryland_expenses'
# Replace 'maryland_expenses' with the actual name of your dataframe
# Create a dataframe of Media expenses where the name of the payee is not NA
media_expenses <- subset(maryland_expenses, category == "Media" & !is.na(payee))
# Assuming your data frame is named 'maryland_expenses'
# Replace 'maryland_expenses' with the actual name of your dataframe
# Create a dataframe of Media expenses where the name of the payee is not NA
media_expenses <- subset(maryland_expenses, category == "Media" & !is.na(payee))
# Assuming your data frame is named 'maryland_expenses'
# Replace 'maryland_expenses' with the actual name of your dataframe
# Create a dataframe of Media expenses where the name of the payee is not NA
media_expenses <- subset(maryland_expenses, expense_category == "Media" & !is.na(payee))
# Assuming your data frame is named 'maryland_expenses'
# Replace 'maryland_expenses' with the actual name of your dataframe
# Create a dataframe where the name of the payee is not NA
filtered_df <- maryland_expenses[!is.na(maryland_expenses$payee), ]
# Print the first few rows of the filtered dataframe for inspection
head(filtered_df)
# Create a dataframe where the name of the payee is not NA
filtered_df <- maryland_expenses[!is.na(maryland_expenses$payee), ]
View(filtered_df)
# Create a dataframe where the name of the payee is not NA
filtered_df <- maryland_expenses[!is.na(maryland_expenses$payee), ]
# Assuming your media expenses dataframe is named 'media_expenses'
# Replace 'media_expenses' with the actual name of your dataframe
# Define the file path for the CSV file in the 'data' folder
output_file_path <- "data/expense_category.csv"
# Use write_csv to save the dataframe to a CSV file
write_csv(expense_category, output_file_path)
# Create a dataframe where the name of the payee is not NA
filtered_df <- maryland_expenses[!is.na(maryland_expenses$payee), ]
# Assuming your media expenses dataframe is named 'media_expenses'
# Replace 'media_expenses' with the actual name of your dataframe
# Define the file path for the CSV file in the 'data' folder
output_file_path <- "data/expense_category.csv"
# Use write_csv to save the dataframe to a CSV file
write_csv(expense category, output_file_path)
# Create a dataframe where the name of the payee is not NA
filtered_df <- maryland_expenses[!is.na(maryland_expenses$payee), ]
# Assuming your media expenses dataframe is named 'media_expenses'
# Replace 'media_expenses' with the actual name of your dataframe
# Define the file path for the CSV file in the 'data' folder
output_file_path <- "data/expense_category.csv"
# Use write_csv to save the dataframe to a CSV file
write_csv(expense_category, output_file_path)
# Create a dataframe where the name of the payee is not NA
filtered_df <- maryland_expenses[!is.na(maryland_expenses$payee), ]
# Assuming your media expenses dataframe is named 'media_expenses'
# Replace 'media_expenses' with the actual name of your dataframe
# Define the file path for the CSV file in the 'data' folder
output_file_path <- "data/expense_category.csv"
# Use write_csv to save the dataframe to a CSV file
write_csv(maryland_expenses, output_file_path)
# Confirm that the file was saved successfully
cat("expense category saved to:", output_file_path, "\n")
expense.category.csv <- read.csv("~/Downloads/expense-category-csv.csv")
View(expense.category.csv)
# Create a dataframe where the name of the payee is not NA
filtered_df <- maryland_expenses[!is.na(maryland_expenses$payee), ]
# Assuming your media expenses dataframe is named 'media_expenses'
# Replace 'media_expenses' with the actual name of your dataframe
# Define the file path for the CSV file in the 'data' folder
output_file_path <- "data/expense_category.csv"
# Use write_csv to save the dataframe to a CSV file
write_csv(maryland_expenses, output_file_path)
# Confirm that the file was saved successfully
cat("expense category saved to:", output_file_path, "\n")
load(payee_clean)
# Create a dataframe where the name of the payee is not NA
filtered_df <- maryland_expenses[!is.na(maryland_expenses$payee), ]
# Assuming your media expenses dataframe is named 'media_expenses'
# Replace 'media_expenses' with the actual name of your dataframe
# Define the file path for the CSV file in the 'data' folder
output_file_path <- "data/expense_category.csv"
# Use write_csv to save the dataframe to a CSV file
write_csv(maryland_expenses, output_file_path)
# Confirm that the file was saved successfully
cat("expense category saved to:", output_file_path, "\n")
expense.category.csv |>
load(payee_clean) |>
filter(Facebook)
# Create a dataframe where the name of the payee is not NA
filtered_df <- maryland_expenses[!is.na(maryland_expenses$payee), ]
# Assuming your media expenses dataframe is named 'media_expenses'
# Replace 'media_expenses' with the actual name of your dataframe
# Define the file path for the CSV file in the 'data' folder
output_file_path <- "data/expense_category.csv"
# Use write_csv to save the dataframe to a CSV file
write_csv(maryland_expenses, output_file_path)
# Confirm that the file was saved successfully
cat("expense category saved to:", output_file_path, "\n")
expense.category.csv |>
load(payee_clean)
# Create a dataframe where the name of the payee is not NA
filtered_df <- maryland_expenses[!is.na(maryland_expenses$payee), ]
# Assuming your media expenses dataframe is named 'media_expenses'
# Replace 'media_expenses' with the actual name of your dataframe
# Define the file path for the CSV file in the 'data' folder
output_file_path <- "data/expense_category.csv"
# Use write_csv to save the dataframe to a CSV file
write_csv(maryland_expenses, output_file_path)
# Confirm that the file was saved successfully
cat("expense category saved to:", output_file_path, "\n")
expense.category.csv
# Create a dataframe where the name of the payee is not NA
filtered_df <- maryland_expenses[!is.na(maryland_expenses$payee), ]
# Assuming your media expenses dataframe is named 'media_expenses'
# Replace 'media_expenses' with the actual name of your dataframe
# Define the file path for the CSV file in the 'data' folder
output_file_path <- "data/expense_category.csv"
# Use write_csv to save the dataframe to a CSV file
write_csv(maryland_expenses, output_file_path)
# Confirm that the file was saved successfully
cat("expense category saved to:", output_file_path, "\n")
expense.category.csv
# Assuming your data frame is named 'your_data'
# Replace 'your_data' with the actual name of your data frame
# Load the dplyr package if not already loaded
library(dplyr)
# Define the titles you want to filter
titles_to_select <- c("Facebook", "Facebook Inc.", "Meta", "Meta Platforms", "Facebook/Meta", "Meta For Business Facebook", "Meta Platforms Inc.")
# Step 1: Filter the data
filtered_data <- your_data %>%
filter(payee_clean %in% titles_to_select)
# Create a dataframe where the name of the payee is not NA
filtered_df <- maryland_expenses[!is.na(maryland_expenses$payee), ]
# Assuming your media expenses dataframe is named 'media_expenses'
# Replace 'media_expenses' with the actual name of your dataframe
# Define the file path for the CSV file in the 'data' folder
output_file_path <- "data/expense_category.csv"
# Use write_csv to save the dataframe to a CSV file
write_csv(maryland_expenses, output_file_path)
# Confirm that the file was saved successfully
cat("expense category saved to:", output_file_path, "\n")
# Assuming your data frame is named 'your_data'
# Replace 'your_data' with the actual name of your data frame
# Load the dplyr package if not already loaded
library(dplyr)
# Define the titles you want to filter
titles_to_select <- c("Facebook", "Facebook Inc.", "Meta", "Meta Platforms", "Facebook/Meta", "Meta For Business Facebook", "Meta Platforms Inc.")
# Step 1: Filter the data
filtered_data <- expense.category.csv %>%
filter(payee_clean %in% titles_to_select)
# Step 2: Calculate the total amount
total_amount <- sum(filtered_data$amount___)
# Create a dataframe where the name of the payee is not NA
filtered_df <- maryland_expenses[!is.na(maryland_expenses$payee), ]
# Assuming your media expenses dataframe is named 'media_expenses'
# Replace 'media_expenses' with the actual name of your dataframe
# Define the file path for the CSV file in the 'data' folder
output_file_path <- "data/expense_category.csv"
# Use write_csv to save the dataframe to a CSV file
write_csv(maryland_expenses, output_file_path)
# Confirm that the file was saved successfully
cat("expense category saved to:", output_file_path, "\n")
# Assuming your data frame is named 'your_data'
# Replace 'your_data' with the actual name of your data frame
# Load the dplyr package if not already loaded
library(dplyr)
# Define the titles you want to filter
titles_to_select <- c("Facebook", "Facebook Inc.", "Meta", "Meta Platforms", "Facebook/Meta", "Meta For Business Facebook", "Meta Platforms Inc.")
# Step 1: Filter the data
filtered_data <- expense.category.csv %>%
filter(payee_clean %in% titles_to_select)
# Assuming your data frame is named 'your_data'
# Replace 'your_data' with the actual name of your data frame
# Load the dplyr package if not already loaded
library(dplyr)
# Define the titles you want to filter
titles_to_select <- c("Facebook", "Facebook Inc.", "Meta", "Meta Platforms", "Facebook/Meta", "Meta For Business Facebook", "Meta Platforms Inc.")
# Step 1: Filter the data
filtered_data <- expense.category.csv %>%
filter(payee_clean %in% titles_to_select)
# Load the data from your CSV file (assuming it's named 'expense.category.csv')
# Replace 'expense.category.csv' with the actual file path or use read.csv as previously shown
# Example: data <- read.csv("expense.category.csv")
# Extract unique payee_clean values
unique_payees <- unique(data$payee_clean)
expense.category.csv |>
group_by(payee_clean |>
summarise(
count=n()
) |>
filter(str_detect(Grantee, '^w|^W')) |>
arrange(Grantee)
expense.category.csv |>
group_by(payee_clean)
expense.category.csv |>
# Assuming your data frame is named 'your_data'
# Replace 'your_data' with the actual name of your data frame
# Specify the names to search for
names_to_find <- c("Facebook", "Facebook Inc.", "Meta", "Meta Platforms", "Facebook/Meta", "Meta For Business Facebook", "Meta Platforms Inc.")
expense.category.csv |>
names_to_find <- c("Facebook", "Facebook Inc.", "Meta", "Meta Platforms", "Facebook/Meta", "Meta For Business Facebook", "Meta Platforms Inc.") |>
filtered_data <- subset(expense.category.csv, payee_clean %in% names_to_find)
names_to_find <- c("Facebook", "Facebook Inc.", "Meta", "Meta Platforms", "Facebook/Meta", "Meta For Business Facebook", "Meta Platforms Inc.") |>
filtered_data <- subset(expense.category.csv, payee_clean %in% names_to_find)
names_to_find <- c("Facebook", "Facebook Inc.", "Meta", "Meta Platforms", "Facebook/Meta", "Meta For Business Facebook", "Meta Platforms Inc.")
filtered_data <- subset(expense.category.csv, payee_clean %in% names_to_find)
# Print the filtered data
print(filtered_data)
# Assuming your filtered data frame is named 'filtered_data'
# Replace 'filtered_data' with the actual name of your filtered data frame
# Calculate the total sum of the 'amount' column
total_amount <- sum(filtered_data$amount)
# Assuming your data frame is named 'your_data'
# Replace 'your_data' with the actual name of your data frame
# Load the dplyr package if not already loaded
library(dplyr)
# Specify the names to search for
names_to_find <- c("Facebook Inc.", "Meta", "Meta Platforms", "Facebook/Meta", "Meta For Business Facebook", "Meta Platforms Inc.")
# Filter the data to include only the specified names
filtered_data <- expense.category.csv %>%
filter(payee_clean %in% names_to_find)
# Calculate the total sum of the 'amount' column in the filtered data
total_amount <- sum(filtered_data$amount)
# Assuming your data frame is named 'your_data'
# Replace 'your_data' with the actual name of your data frame
# Load the dplyr package if not already loaded
library(dplyr)
# Specify the names to search for
names_to_find <- c("Facebook Inc.", "Meta", "Meta Platforms", "Facebook/Meta", "Meta For Business Facebook", "Meta Platforms Inc.")
# Filter the data to include only the specified names
filtered_data <- expense.category.csv %>%
filter(payee_clean %in% names_to_find)
# Convert the 'amount' column to numeric
filtered_data$amount <- as.numeric(filtered_data$amount)
# Calculate the total sum of the 'amount' column in the filtered data
total_amount <- sum(filtered_data$amount, na.rm = TRUE)  # Use na.rm = TRUE to handle any NA values
# Print the total amount
cat("Total Amount for Specific Names:", total_amount, "\n")
expense.category.csv <- read.csv("expense.category.csv")
expense.category.csv |>
sum("Online_Advertising")
expense.category.csv |>
sum("amount, Online Advertising")
expense.category.csv |>
count(amount___)
expense.category.csv |>
count(amount___)
expense.category.csv |>
load("Online Advertising")
expense.category.csv |>
count(amount___)
